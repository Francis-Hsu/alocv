// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/alocvBeta.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// glmnetALODirect
arma::mat glmnetALODirect(const arma::mat& X, const arma::mat& y, const arma::sp_mat& beta, const arma::vec& lambda, const double& alpha, const arma::field<arma::uvec>& addList, const arma::field<arma::uvec>& dropList, const int family, const bool intercept);
static SEXP _alocvBeta_glmnetALODirect_try(SEXP XSEXP, SEXP ySEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP addListSEXP, SEXP dropListSEXP, SEXP familySEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::uvec>& >::type addList(addListSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::uvec>& >::type dropList(dropListSEXP);
    Rcpp::traits::input_parameter< const int >::type family(familySEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(glmnetALODirect(X, y, beta, lambda, alpha, addList, dropList, family, intercept));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _alocvBeta_glmnetALODirect(SEXP XSEXP, SEXP ySEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP addListSEXP, SEXP dropListSEXP, SEXP familySEXP, SEXP interceptSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_alocvBeta_glmnetALODirect_try(XSEXP, ySEXP, betaSEXP, lambdaSEXP, alphaSEXP, addListSEXP, dropListSEXP, familySEXP, interceptSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// multinetExpand
arma::mat multinetExpand(const arma::mat& X, const arma::uword K);
static SEXP _alocvBeta_multinetExpand_try(SEXP XSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(multinetExpand(X, K));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _alocvBeta_multinetExpand(SEXP XSEXP, SEXP KSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_alocvBeta_multinetExpand_try(XSEXP, KSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// svcALO
arma::vec svcALO(const arma::mat& X, const arma::vec& y, const arma::vec& w, const double& b, const double& lambda, const double& tol);
RcppExport SEXP _alocvBeta_svcALO(SEXP XSEXP, SEXP ySEXP, SEXP wSEXP, SEXP bSEXP, SEXP lambdaSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(svcALO(X, y, w, b, lambda, tol));
    return rcpp_result_gen;
END_RCPP
}
// svcKerALO
arma::vec svcKerALO(const arma::mat& K, const arma::vec& y, const arma::vec& alpha, const double& rho, const double& lambda, const double& tol);
RcppExport SEXP _alocvBeta_svcKerALO(SEXP KSEXP, SEXP ySEXP, SEXP alphaSEXP, SEXP rhoSEXP, SEXP lambdaSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(svcKerALO(K, y, alpha, rho, lambda, tol));
    return rcpp_result_gen;
END_RCPP
}
// svrKerALO
arma::vec svrKerALO(const arma::mat& K, const arma::vec& y, const arma::vec& alpha, const double& rho, const double& lambda, const double& epsilon, const double& tol);
RcppExport SEXP _alocvBeta_svrKerALO(SEXP KSEXP, SEXP ySEXP, SEXP alphaSEXP, SEXP rhoSEXP, SEXP lambdaSEXP, SEXP epsilonSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(svrKerALO(K, y, alpha, rho, lambda, epsilon, tol));
    return rcpp_result_gen;
END_RCPP
}
// gaussianKer
arma::mat gaussianKer(const arma::mat& X, const double& gamma);
RcppExport SEXP _alocvBeta_gaussianKer(SEXP XSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(gaussianKer(X, gamma));
    return rcpp_result_gen;
END_RCPP
}
// polynomialKer
arma::mat polynomialKer(const arma::mat& X, const double& gamma, const double& coef0, const int& degree);
RcppExport SEXP _alocvBeta_polynomialKer(SEXP XSEXP, SEXP gammaSEXP, SEXP coef0SEXP, SEXP degreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double& >::type coef0(coef0SEXP);
    Rcpp::traits::input_parameter< const int& >::type degree(degreeSEXP);
    rcpp_result_gen = Rcpp::wrap(polynomialKer(X, gamma, coef0, degree));
    return rcpp_result_gen;
END_RCPP
}

// validate (ensure exported C++ functions exist before calling them)
static int _alocvBeta_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("arma::mat(*glmnetALODirect)(const arma::mat&,const arma::mat&,const arma::sp_mat&,const arma::vec&,const double&,const arma::field<arma::uvec>&,const arma::field<arma::uvec>&,const int,const bool)");
        signatures.insert("arma::mat(*multinetExpand)(const arma::mat&,const arma::uword)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _alocvBeta_RcppExport_registerCCallable() { 
    R_RegisterCCallable("alocvBeta", "_alocvBeta_glmnetALODirect", (DL_FUNC)_alocvBeta_glmnetALODirect_try);
    R_RegisterCCallable("alocvBeta", "_alocvBeta_multinetExpand", (DL_FUNC)_alocvBeta_multinetExpand_try);
    R_RegisterCCallable("alocvBeta", "_alocvBeta_RcppExport_validate", (DL_FUNC)_alocvBeta_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_alocvBeta_glmnetALODirect", (DL_FUNC) &_alocvBeta_glmnetALODirect, 9},
    {"_alocvBeta_multinetExpand", (DL_FUNC) &_alocvBeta_multinetExpand, 2},
    {"_alocvBeta_svcALO", (DL_FUNC) &_alocvBeta_svcALO, 6},
    {"_alocvBeta_svcKerALO", (DL_FUNC) &_alocvBeta_svcKerALO, 6},
    {"_alocvBeta_svrKerALO", (DL_FUNC) &_alocvBeta_svrKerALO, 7},
    {"_alocvBeta_gaussianKer", (DL_FUNC) &_alocvBeta_gaussianKer, 2},
    {"_alocvBeta_polynomialKer", (DL_FUNC) &_alocvBeta_polynomialKer, 4},
    {"_alocvBeta_RcppExport_registerCCallable", (DL_FUNC) &_alocvBeta_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_alocvBeta(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
