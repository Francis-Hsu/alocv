// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/alocv.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// glmnetALODirect
arma::mat glmnetALODirect(const arma::mat& X, const arma::mat& y, const arma::sp_mat& beta, const arma::vec& lambda, const double& alpha, const arma::field<arma::uvec>& addList, const arma::field<arma::uvec>& dropList, const int family, const bool intercept);
static SEXP _alocv_glmnetALODirect_try(SEXP XSEXP, SEXP ySEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP addListSEXP, SEXP dropListSEXP, SEXP familySEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::uvec>& >::type addList(addListSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::uvec>& >::type dropList(dropListSEXP);
    Rcpp::traits::input_parameter< const int >::type family(familySEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(glmnetALODirect(X, y, beta, lambda, alpha, addList, dropList, family, intercept));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _alocv_glmnetALODirect(SEXP XSEXP, SEXP ySEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP addListSEXP, SEXP dropListSEXP, SEXP familySEXP, SEXP interceptSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_alocv_glmnetALODirect_try(XSEXP, ySEXP, betaSEXP, lambdaSEXP, alphaSEXP, addListSEXP, dropListSEXP, familySEXP, interceptSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// multinetExpand
arma::mat multinetExpand(const arma::mat& X, const arma::uword K);
static SEXP _alocv_multinetExpand_try(SEXP XSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(multinetExpand(X, K));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _alocv_multinetExpand(SEXP XSEXP, SEXP KSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_alocv_multinetExpand_try(XSEXP, KSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _alocv_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("arma::mat(*glmnetALODirect)(const arma::mat&,const arma::mat&,const arma::sp_mat&,const arma::vec&,const double&,const arma::field<arma::uvec>&,const arma::field<arma::uvec>&,const int,const bool)");
        signatures.insert("arma::mat(*multinetExpand)(const arma::mat&,const arma::uword)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _alocv_RcppExport_registerCCallable() { 
    R_RegisterCCallable("alocv", "_alocv_glmnetALODirect", (DL_FUNC)_alocv_glmnetALODirect_try);
    R_RegisterCCallable("alocv", "_alocv_multinetExpand", (DL_FUNC)_alocv_multinetExpand_try);
    R_RegisterCCallable("alocv", "_alocv_RcppExport_validate", (DL_FUNC)_alocv_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_alocv_glmnetALODirect", (DL_FUNC) &_alocv_glmnetALODirect, 9},
    {"_alocv_multinetExpand", (DL_FUNC) &_alocv_multinetExpand, 2},
    {"_alocv_RcppExport_registerCCallable", (DL_FUNC) &_alocv_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_alocv(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
