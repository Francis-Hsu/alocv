// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_alocv_RCPPEXPORTS_H_GEN_
#define RCPP_alocv_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace alocv {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("alocv", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("alocv", "_alocv_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in alocv");
            }
        }
    }

    inline arma::mat glmnetALODirect(const arma::mat& X, const arma::mat& y, const arma::sp_mat& beta, const arma::vec& lambda, const double& alpha, const arma::field<arma::uvec>& addList, const arma::field<arma::uvec>& dropList, const int family, const bool intercept) {
        typedef SEXP(*Ptr_glmnetALODirect)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_glmnetALODirect p_glmnetALODirect = NULL;
        if (p_glmnetALODirect == NULL) {
            validateSignature("arma::mat(*glmnetALODirect)(const arma::mat&,const arma::mat&,const arma::sp_mat&,const arma::vec&,const double&,const arma::field<arma::uvec>&,const arma::field<arma::uvec>&,const int,const bool)");
            p_glmnetALODirect = (Ptr_glmnetALODirect)R_GetCCallable("alocv", "_alocv_glmnetALODirect");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_glmnetALODirect(Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(beta)), Shield<SEXP>(Rcpp::wrap(lambda)), Shield<SEXP>(Rcpp::wrap(alpha)), Shield<SEXP>(Rcpp::wrap(addList)), Shield<SEXP>(Rcpp::wrap(dropList)), Shield<SEXP>(Rcpp::wrap(family)), Shield<SEXP>(Rcpp::wrap(intercept)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::mat multinetExpand(const arma::mat& X, const arma::uword K) {
        typedef SEXP(*Ptr_multinetExpand)(SEXP,SEXP);
        static Ptr_multinetExpand p_multinetExpand = NULL;
        if (p_multinetExpand == NULL) {
            validateSignature("arma::mat(*multinetExpand)(const arma::mat&,const arma::uword)");
            p_multinetExpand = (Ptr_multinetExpand)R_GetCCallable("alocv", "_alocv_multinetExpand");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_multinetExpand(Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(K)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

}

#endif // RCPP_alocv_RCPPEXPORTS_H_GEN_
